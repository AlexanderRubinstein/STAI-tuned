import argparse
import os
import sys


# local modules
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))
from utility.utils import (
    apply_random_seed,
    pretty_json,
    kill_processes,
    get_current_time,
    get_current_run_folder,
    read_yaml,
    get_hash,
    apply_func_to_dict_by_nested_key,
    normalize_path
)
from utility.logger import (
    LOGGING_CONFIG_KEY,
    make_logger_with_tmp_output_folder,
    handle_exception,
    redneck_logger_context,
    make_logger
)


AUTOGEN_PREFIX = "autogenerated"
EXP_NAME_CONFIG_KEY = "experiment_name"
RUN_PATH_CONFIG_KEY = "current_run_folder"
START_TIME_CONFIG_KEY = "start_time"
TYPE_KEY = "type"
OUTPUT_CSV_KEY = "output_csv"
DEFAULT_WANDB_CONFIG = \
    {
        "netrc_path": "~/.netrc",
        "stats": {
            "input": True,
            "logits": True,
            "prediction": True,
            "target": True
        }
    }
AUTOGEN_PREFIX = "autogenerated"
HARDCODED_CONFIG = \
None


def parse_args():
    parser = argparse.ArgumentParser(
        description="Run an experiment with given configs."
    )
    parser.add_argument("--config_path", type=str, required=True,
                        help="path to config file")
    return parser.parse_args()


def prepare_wrapper_for_experiment(check_config):

    def wrapper_for_experiment(run_experiment):

        def run_experiment_with_logger():

            logger = make_logger_with_tmp_output_folder()
            processes_to_kill_before_exiting = []

            try:

                main_args = parse_args()

                experiment_config = get_config(
                    main_args.config_path,
                    check_config,
                    logger
                )

                with redneck_logger_context(
                    experiment_config[LOGGING_CONFIG_KEY],
                    experiment_config["current_run_folder"],
                    logger=logger,
                    exp_name=experiment_config[EXP_NAME_CONFIG_KEY],
                    start_time=None,
                    config_to_log_in_wandb=experiment_config
                ) as logger:

                    logger.log(
                        "Experiment config:\n{}".format(
                            pretty_json(experiment_config)
                        )
                    )

                    apply_random_seed(
                        experiment_config["params"]["random_seed"]
                    )

                    run_experiment(
                        experiment_config,
                        logger,
                        processes_to_kill_before_exiting
                    )

            except Exception as e:
                handle_exception(logger, e)
            except:
                handle_exception(logger)
            finally:
                kill_processes(processes_to_kill_before_exiting)

        return run_experiment_with_logger

    return wrapper_for_experiment


def get_config(config_path, check_config, logger=make_logger()):

    def log_which_config_is_checked(logger, config_path):
        logger.log(
            "Checking config: {}".format(
                config_path
                    if config_path
                    else "HARDCODED_CONFIG in src/train_eval/configs.py"
            ),
            auto_newline=True
        )

    if not os.path.exists(config_path):
        raise Exception(
            "Config was not found under this path: {}".format(
                config_path
            )
        )
    config_dirname = os.path.dirname(config_path)

    experiment_name = os.path.basename(config_dirname)
    if experiment_name == AUTOGEN_PREFIX:
        experiment_name = os.path.basename(os.path.dirname(config_dirname))
    logger.log(
        "Reading config for \"{}\" from {}".format(
            experiment_name,
            config_path
        ),
        auto_newline=True
    )

    experiment_config = read_yaml(config_path)
    if experiment_config["use_hardcoded_config"]:
        logger.log(
            "Using hardcoded config."
        )
        assert HARDCODED_CONFIG
        experiment_config = HARDCODED_CONFIG
        experiment_config.pop(EXP_NAME_CONFIG_KEY)
        experiment_config.pop(RUN_PATH_CONFIG_KEY)
        config_path = None

    log_which_config_is_checked(logger, config_path)
    check_config(experiment_config, config_path, logger=logger)

    experiment_config[EXP_NAME_CONFIG_KEY] = experiment_name

    experiment_config[START_TIME_CONFIG_KEY] = get_current_time()
    experiment_config[RUN_PATH_CONFIG_KEY] = get_current_run_folder(
        experiment_name,
        get_hash(experiment_config)
    )

    paths_in_config = find_nested_keys_by_keyword_in_config(
        experiment_config,
        "path"
    )
    normalize_paths(experiment_config, paths_in_config)

    return experiment_config


def find_nested_keys_by_keyword_in_config(
    config,
    keyword,
    separator='/',
    prefix=""
):
    if isinstance(config, dict):
        res = []
        for key in config.keys():
            subpaths = find_nested_keys_by_keyword_in_config(
                config[key],
                keyword=keyword,
                separator=separator,
                prefix=prefix+key+separator
            )
            res.extend(subpaths)
        return res
    else:
        assert prefix
        assert prefix[-1] == separator
        if keyword in prefix:
            return [prefix[:-1]]
    return []


def normalize_paths(config, nested_keys, separator='/'):
    for key in nested_keys:
        apply_func_to_dict_by_nested_key(
            config,
            key.split(separator),
            normalize_path
        )


def make_csv_config(
    csv_path,
    csv_row_number,
    spreadsheet_url,
    worksheet_name
):
    return {
        "path": csv_path,
        "row_number": csv_row_number,
        "spreadsheet_url": spreadsheet_url,
        "worksheet_name": worksheet_name
    }
